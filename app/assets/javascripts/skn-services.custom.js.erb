/**
 * Created by jscott on 1/1/16.
 * Refs: https://github.com/rweng/jquery-datatables-rails
 *       http://api.jquery.com/jQuery.getJSON/
 *       http://getbootstrap.com/components/#panels
 *       http://datatables.net
 */


var logEnabled = <%= Rails.env.development? %>,
    csrfToken,
    controllerAction,
    controllerName,
    accessibleUrl,
    userTable,
    accessTable,
    contentTable,
    accessibleTable,
    mcUserTable,
    mcEntriesTable,
    mcTopicTable,
    mcContentTable;


/**
 * Prevents debuging messages from going to console none development mode
 * @param message {string}  to log on console
 */
function consoleLog(message) {
    if (logEnabled) {
        console.log(message);
    }
}


/* ********************************************************
 * System Info Page: :details_sysinfo
 * ********************************************************
 */

/**
 * Collect portion of RouteInfo
 */
function handleRailsInfo(ev) {
    var pkg = $(ev.currentTarget).data(),
            dataResponse;

    console.log( "handleRailsInfo() init: " + JSON.stringify(pkg));

    $.ajax({
        headers: {'X-CSRF-Token': csrfToken, 'X-XSRF-Token': csrfToken },
        method: "GET",
        url: '/' + pkg.url
    }).done(function(data,textStatus, jqXHR) {
        dataResponse = $(jqXHR.responseText); //.find('body').contents();
        if (pkg.header.startsWith('#about')) {
            $(pkg.header).empty().append('<h2>Properties</h2>').addClass('show');
        } else {
            $(pkg.header).remove();
        }
        $(pkg.place).html( dataResponse ).fadeIn().addClass('show');

        console.log( "handleRailsInfo() success: " + textStatus + ", Response=" + dataResponse);
    }).fail(function(jqXHR, textStatus, errorThrown) {
        console.log( "handleRailsInfo() error: " + textStatus + ', thrown=' + errorThrown + ', Parms=' + JSON.stringify(pkg));
        $(pkg.place).addClass('hidden');
    });

    return false; // to stop future processing of this event
}

/* ********************************************************
 * ContentProfileDemo Page: :content_profile_demo
 * ********************************************************
 */


/**
 * Content/Access Profile Table Selection
 * - fire ajax to get data, using url on accessible-table tbody
 * - then update accessible-table rows
 */
function profileTablesRequester(ev) {
    var dataPackage = $(ev.currentTarget).data().package,
            contentType = dataPackage.hasOwnProperty('resource_options'), // then AccessProfile
            dataResponse,
            profileType;

    if (contentType) {
        accessibleUrl = $("#access-table tbody").data().accessibleUrl;
        profileType = "AccessProfile";
    } else {
        accessibleUrl = $("#content-table tbody").data().accessibleUrl;
        profileType = "ContentProfile";
    }

    /*
     * flag selected in related table */
    $("table.profile tbody tr").removeClass('success');
    $(ev.currentTarget).addClass('success');

    $.ajax({
        headers: {'X-CSRF-Token': csrfToken, 'X-XSRF-Token': csrfToken },
        method: "GET",
        dataType: "json",
        contentType: 'json',
        url: accessibleUrl,
        data: dataPackage,
        accepts: 'json'
    })
    .done(function(data,textStatus) {
        dataResponse = data.package;
        replaceAccessibleTableRows(dataResponse);
        consoleLog( "profileTablesRequester("+ profileType + ") success: " + textStatus + ", Response=" + JSON.stringify(dataResponse));
    })
    .fail(function(jqXHR, textStatus, errorThrown) {
        accessibleTable.clear().draw();
        consoleLog( "profileTablesRequester("+ profileType + ") error: " + textStatus + ', thrown=' + errorThrown + ', RequestPkg=' + JSON.stringify(dataPackage));
    });

    return false;
}

/**
 * Reloads the access-table with supplied rows from a accessProfile package
 * @param dataPackage {accessProfile}
 */
function replaceAccessTableRows(dataPackage) {
    var tTitle = $('#access-title'),
            vList = dataPackage.access_profile.entries,
            newRow = [],
            counter = 0,
            trNode,
            trRow;

    tTitle.html(dataPackage.message);
    if (dataPackage.success) {
        accessTable.clear().draw();

        $.each(vList, function(index, row) {
            newRow = [];
            newRow.push('<td>' + row.description  + '</td>');
            newRow.push('<td>' + row.content_type  + '</td>');
            newRow.push('<td>' + row.content_type_description  + '</td>');
            newRow.push('<td>' + row.topic_type  + '</td>');
            newRow.push('<td>' + JSON.stringify(row.topic_value)  + '</td>');
            newRow.push('<td>' + JSON.stringify(row.content_value)  + '</td>');
            trRow = $('<tr>').append(newRow.join());

            trNode = accessTable.row.add(trRow).draw().node();
            $(trNode).data('package', row).on( "click", profileTablesRequester);
            counter = index + 1;
        });
    } else {
        accessTable.clear().draw();
        accessibleTable.clear().draw();
    }

    consoleLog('replaceAccessTableRows(rowsAdded=' + counter + ')');
    return false;
}

/**
 * Reloads the content-table with supplied rows from a contentProfile package
 * @param dataPackage {contentProfile}
 */
function replaceContentTableRows(dataPackage) {
    var tTitle = $('#content-title'),
            vList = dataPackage.content_profile.entries,
            newRow = [],
            counter = 0,
            trNode,
            trRow;

    tTitle.html(dataPackage.message);
    if (dataPackage.success) {

        contentTable.rows().remove().draw();

        $.each(vList, function(index, row) {
            newRow = [];
            newRow.push('<td>' + row.description  + '</td>');
            newRow.push('<td>' + row.content_type  + '</td>');
            newRow.push('<td>' + row.content_type_description  + '</td>');
            newRow.push('<td>' + row.topic_type  + '</td>');
            newRow.push('<td>' + JSON.stringify(row.topic_value)  + '</td>');
            newRow.push('<td>' + JSON.stringify(row.content_value)  + '</td>');
            trRow = $('<tr>').append(newRow.join());

            trNode = contentTable.row.add(trRow).draw().node();
            $(trNode).data('package', row).on( "click", profileTablesRequester);
            counter = index + 1;
        });
    } else {
        contentTable.rows().remove().draw();
        accessibleTable.rows().remove().draw();
    }

    consoleLog('replaceContentTableRows(rowsAdded=' + counter + ')');
    return false;
}

/**
 * Reloads the accessible-table with supplied rows from a Profile package
 * @param dataPackage {ProfileEntry}
 *
 * dataPackage = {success: true, message: "", content: 'access',
 *                username: pg_u.username, display_name: pg_u.display_name ,
 *                package: [
 *                  {source: "datafiles", filename: "someFile.dat", created: '12/1/2015', size: "0"},
 *                  ...
 *                         ]
 *                }
 */
function replaceAccessibleTableRows(dataPackage) {
    var tTitle = $('#accessible-title'),
            vList = dataPackage.payload,
            newRow = [],
            counter = 0,
            trNode,
            trRow;

    tTitle.html(dataPackage.message);
    if (dataPackage.success) {
        accessibleTable.clear().draw();
        $.each(vList, function(index, row) {
            newRow = [];
            newRow.push('<td>' + row.filename  + '</td>');
            newRow.push('<td>' + row.source  + '</td>');
            newRow.push('<td>' + row.created  + '</td>');
            newRow.push('<td>' + row.size  + '</td>');
            trRow = $('<tr>').append(newRow.join());

            trNode = accessibleTable.row.add(trRow).draw().node();
            $(trNode).data('package', row); // .on( "click", profileTablesRequester);
            counter = index + 1;
        });
    } else {
        accessibleTable.clear().draw();
        $("table.profile tbody tr").removeClass('success');
    }

    consoleLog('replaceAccessibleTableRows(rowsAdded=' + counter + ')');
    return false;
}

/**
 * Initialization Routine for Demo Pages
 * @returns {boolean}
 */
function handleDemoPages() {

    accessibleUrl = $("#accessible-table tbody").data().accessibleUrl;

    accessTable = $('#access-table').DataTable({
        language: {
            emptyTable: "Please make a choice from the Users table on the left."
        }
    });

    contentTable = $('#content-table').DataTable({
        language: {
            emptyTable: "Please make a choice from the Users table on the left."
        }
    });

    accessibleTable = $('#accessible-table').DataTable({
        language: {
            emptyTable: "Please make a choice from content table above."
        }
    });

    userTable = $('#users-table').DataTable({
        scrollY: "620px",
        language: {
            emptyTable: "No User Available!"
        }
    });


    /**
     *  Activate the UI, Track clicks from UsersTable to control both pages
     */
    var userRows = $('#users-table tbody tr');


    userRows.on('click', function (event) {
        var dataPackage = $(event.currentTarget).data().package;

        /*
         Initialize Title on Accessible Content Table
         */
        $('#accessible-title').
                html('Accessible Content for ' +
                      dataPackage.username + ":" +
                      dataPackage.display_name
                    );

        /* maintain accessibleTable's state */
        accessibleTable.clear().draw();

        /* maintain selected item on users table */
        userRows.removeClass('success');
        $(event.currentTarget).addClass('success');

        /*
         * Table loaders */
        replaceAccessTableRows(dataPackage.package[0]);
        replaceContentTableRows(dataPackage.package[1]);

        consoleLog(dataPackage.username + " Selected. "); // + JSON.stringify(dataPackage));
    });

    /* choose first one to start things off */
    userRows.first().click();
    consoleLog("handleDemoPages() Enabled!");

    return true;
} // end function


/* ********************************************************
 * ManageContentProfiles Page: :manage_content_profiles
 * ********************************************************
 */
/**
 * Reloads the table with supplied rows from a
 * @param dataPackage ["LicensedStates",3,{"data-description":"Producer Actions"}]
 */
function replaceTypesTableRows(dtTable, dataPackage) {
    var vList = dataPackage,
            newRow = [],
            counter = 0,
            trNode,
            trRow;


    try {
        dtTable.clear().draw();
        $.each(vList, function (index, row) {
            newRow = [];
            newRow.push('<td>' + row[0] + '</td>');
            newRow.push('<td>' + row[2]['data-description'] + '</td>');
            trRow = $('<tr>').append(newRow.join());

            trNode = dtTable.row.add(trRow).draw().node();
            $(trNode).data('package', row); // .on( "click", profileTablesRequester);
            counter = index + 1;
        });
        dtTable.draw();
    } catch(e) {
        consoleLog("replaceTypesTableRows()" + e);
        consoleLog("dataPackage=" + JSON.stringify(dataPackage));
        dtTable.clear().draw();
    }


    consoleLog('replaceTypesTableRows(rowsAdded=' + counter + ')');
    return false;
}

/**
 * Reloads the mc-entries-table with supplied rows from a
 * @param dataPackage
 */
function replaceEntriesTableRows(dataPackage) {
    var vList = dataPackage.profile_entries,
            newRow = [],
            counter = 0,
            trNode,
            trRow;

    if (dataPackage.profile_exist) {
        mcEntriesTable.clear().draw();

        $.each(vList, function(index, row) {
            newRow = [];
            newRow.push('<td>' + row.description  + '</td>');
            newRow.push('<td>' + row.content_type  + '</td>');
            newRow.push('<td>' + row.content_type_description  + '</td>');
            newRow.push('<td>' + row.topic_type  + '</td>');
            newRow.push('<td>' + row.topic_type_description  + '</td>');
            newRow.push('<td>' + row.topic_value.join(',')  + '</td>');
            newRow.push('<td>' + JSON.stringify(row.content_value)  + '</td>');
            trRow = $('<tr>').append(newRow.join());

            trNode = mcEntriesTable.row.add(trRow).draw().node();
            $(trNode).data('package', row).on( "click", function(ev) {
                var pkg = $(ev.currentTarget).data().package;

                replaceTypesTableRows(mcContentTable, pkg.content_selects);
                replaceTypesTableRows(mcTopicTable, pkg.topic_selects);
                /*
                 * flag selected in related table */
                $("#mc-entries-table tbody tr").removeClass('success');
                $(ev.currentTarget).addClass('success');

            });
            counter = index + 1;
        });

    } else {
        mcEntriesTable.clear().draw();
    }

    consoleLog('replaceEntriesTableRows(rowsAdded=' + counter + ')');
    return false;
}

/*
 * Updates the ContentProfile Tab
*/
function replaceProfileTabInfo(event) {
    var dataPackage = $(event.currentTarget).data().package;

    /* Initialize Titles on ContentProfile Tab */
    try {
        $('#username').html(dataPackage.username);
        $('#display_name').html(dataPackage.display_name);
        $('#assigned_group').html(dataPackage.assigned_group);
        $('#email').html(dataPackage.email);
        $('#authentication_provider').html(dataPackage.authentication_provider);
        $('#pak').html(dataPackage.pak);
        if (dataPackage.profile_exist) {
            $('#profile_entries').html(dataPackage.profile_entries.length);
        } else {
            $('#profile_entries').html('0');
        }
    } catch(e) {
        consoleLog("replaceProfileTabInfo()" + e);
        consoleLog("dataPackage=" + JSON.stringify(dataPackage));
    }

    /* maintain selected item on users table */
    $('#mc-users-table tbody tr').removeClass('success');
    $(event.currentTarget).addClass('success');

    /* reset content/topic table views */
    mcContentTable.clear().draw();
    mcTopicTable.clear().draw();

    /* update content profile entries table */
    replaceEntriesTableRows(dataPackage);

    consoleLog(dataPackage.username + " Selected."); // + JSON.stringify(dataPackage));
    return true;
}

/**
 * Initialization Routine for ContentProfile Management Pages
 * @returns {boolean}
 */
function handleManagementPages() {

    mcUserTable = $('#mc-users-table').DataTable({
        scrollY: "620px",
        language: {
            emptyTable: "No User Available!"
        }
    });

    mcEntriesTable = $('#mc-entries-table').DataTable({
        scrollY: "620px",
        language: {
            emptyTable: "No User Available!"
        }
    });

    mcTopicTable = $('#mc-topic-table').DataTable({
        scrollY: "620px",
        language: {
            emptyTable: "No User Available!"
        }
    });

    mcContentTable = $('#mc-content-table').DataTable({
        scrollY: "620px",
        language: {
            emptyTable: "No User Available!"
        }
    });

    /**
     *  Activate the UI, Track clicks from UsersTable to control both pages
     */
    $('#mc-users-table tbody tr').on('click', replaceProfileTabInfo);

    /*
     * choose first one to start things off */
    $('#mc-users-table tbody tr').first().click();


    /* Watch the Tabs change, dataTable header don't align when invisible
     * then try to update the DataTable on that page.
     * events = 'show|shown.bs.tab'   shown works */
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        var target = $(e.target).data().dttable; // activated tab
        if (target != 'no') {
            $(target).dataTable().api().draw();
        }
        return true;
    });

    consoleLog("handleManagementPages() Enabled!");

    return true;
} // end function

/**
 * Handle new interaction for ContentProfile Creation Page
 * @returns {boolean}
 */
function handleNewContentProfile() {
    if ( !controllerName.startsWith('content_profiles') )
    return false;

    $('#content_profile_person_authentication_key').change(function (event) {
        var obj = $('#content_profile_person_authentication_key option:selected').data().user;

        if (null != obj ) {
            consoleLog("handleNewContentProfile() Handled for: " + obj.display_name);
            $('#content_profile_authentication_provider').val(obj.authentication_provider);
            $('#content_profile_username').val(obj.username);
            $('#content_profile_display_name').val(obj.display_name);
            $('#content_profile_email').val(obj.email);
            $("#content_profile_profile_type_id option:selected").prop("selected",false);
            $("#content_profile_profile_type_id option:Contains('" + obj.profile_type[0] + "')").prop("selected", true);
        } else {
            consoleLog("handleNewContentProfile() No Selection to Handle.");
            $('#content_profile_authentication_provider').val("");
            $('#content_profile_username').val("");
            $('#content_profile_display_name').val("");
            $('#content_profile_email').val("");
            $("#content_profile_profile_type_id option:selected").prop("selected", false);
        }

        return false;
    });

    consoleLog("handleNewContentProfile() Enabled!");

    return false;
}

/* ********************************************************
 * JQuery Enabled Processing
 * ********************************************************
 */
$(function() {

    controllerAction = $('body').data().controllerAction;
    controllerName = $('body').data().controllerName;
    /* Save this token for the Ajax calls */
    csrfToken = $('meta[name="csrf-token"]').attr('content');

    /* Initialize code pretty print feature */
    prettyPrint();

    /*
     * Only for the ProfilesController based pages */
    if ( controllerName.startsWith('profiles') ) {
        /*
         * Initial Establish the dataTables */
        try {
            $.extend(true, $.fn.dataTable.defaults, {
                dom: "fti",
                colReorder: false,
                fixedColumns: false,
                fixedHeader: false,
                autoWidth: true,
                paging: false,
                searching: true,
                scrollY: "420px",
                scrollCollapse: true,
                scroller: true,
                responsive: true,
                select: {
                    selector: "tr",
                    style: "single",
                    items: "row",
                    info: true
                }
            });
        } catch (e) {
            consoleLog("DataTables Defaults Failed " + e);
        }
    }

    switch (controllerAction) {
        case 'details_sysinfo':
            /*
             * Initial Establish sections
             * id="about" -  <a href="rails/info/properties" onclick="getRailsInfo('about-content'); return false;">
             *     target: <div id="about-content" style="display: none"></div>
             * id="routes" - <a href="rails/info/routes" onclick="getRailsInfo('route-content'); return false;">
             *     target: <div id="route-content" style="display: none"></div>
             */
            $('h2 > a.btn-lg').on('click', handleRailsInfo);
            break;
        case 'manage_content_profiles':
            handleManagementPages();
            break;
        case 'content_profile_demo':
            handleDemoPages();
            break;
        case 'new':
            handleNewContentProfile();
            break;
        default:
            consoleLog("Current Page (" + controllerAction + ") has no custom Javascripts enabled.");
    }
    consoleLog("Initialization Complete for: " + controllerName + "/" + controllerAction + ".");

    return false;
});


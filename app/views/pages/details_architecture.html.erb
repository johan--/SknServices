<% provide(:title, accessed_page_name) %>

<article>

    <header class="page-header">
        <h2><%= accessed_page_name %></h2>
        <%= image_tag("SknService-CoreComponents.jpg", alt: "Main Path", class: "huge-image") %>
    </header>

    <section>
        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingGuidance">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#guidance" aria-expanded="false" aria-controls="headingGuidance">
                        Design Guidance: Commentary
                    </a>
                </h4>
            </div>
            <div id="guidance" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingGuidance">
                <div class="panel-body">
                    <p class="lead">This application is a Rails 4.2.5+ &amp; Ruby-2.2.3 app.  However, WE DO NOT FOLLOW THE CLASSIC RAILS WAY.</p>
                    <p> Rails is an MVC Web Framework.  The MVC model is a classic and used with success, as is, for many applications.  However, there are many maintenance, scaling, and growth issues when the codeset exceeds a certain size or features set mix.
                    We understand these growth issues, and have chosen to apply the more traditional <strong>Domain Driven Design(DDD)</strong> approach, with Rails isolated as a Web Interface; as much as possible.</p>
                    <p>Our way involves treating all of Rails as a Web Interface or adapter, and isolating our application business logic from it.  Calling on Rails only when absolutely needed to exchange
                        results with the user.  One outcome is, we don't waste time testing Rails and can focus on our delivery with significant code re-use opportunities.</p>
                    <p>The persistent assumptions, by Rails's Developers, that MVC and convention over configuration is all that's needed, and also that the developer should be shielded from the underlying
                        technologies; is very dangerous and Microsoft-ish.  For examples of the wrong direction read the Rails Release notes starting a 4.0, up to version 5.
                        Autoloading and ActiveSupport::Concerns are actually crippling core Ruby functionality, like <code>Module#include</code>: even the simple named route is in danger for V5, i.e. <code>:home_page_path()</code>.</p>
                    <p class="lead">This application source, and implementation, serves as a model for how web applications can be engineered without dumbing down or wasting time.</p>
                </div>
            </div>
            <p>Rails is a Great Web Framework.  Your application can derive great benefit from Rails when engineered (Designed) to co-exist with Rails.</p>
        </div>
		<div class="panel panel-info">
	        <div class="panel-heading" role="tab" id="headingOurWay">
	            <h4 class="panel-title">
	                <a class="collapsed" role="button" data-toggle="collapse" href="#ourWay" aria-expanded="false" aria-controls="headingOurWay">
                        Design Guidance: Our (A) Way
	                </a>
	            </h4>
	        </div>
	        <div id="ourWay" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOurWay">
	            <div class="panel-body">                   
			        <p class="lead">We do not add business process logic to Models, controllers, or views! (the classic Rails Way)</p>
              <p>We choose to step one step back from Rails code containers, models - views - controllers, and place our code in different containers more appropriate to our application purpose.  This need not be
                considered a huge departure from the Rails Way, just an alternate approach to building application with Rails.</p>
			        <p>We consider controller methods as entry points into our business logic and those entry points are coded with one-line invocations of our specialty service methods <code>:service_name.entry_method_name(params)</code>.
			          Where <code>:service_name</code> is the name of a business process service class associated with that page.
			          This service's method will be/is specially designed to accept input via the requests params and return results using a consistent package of values, which can easily be converted into JSON,
			          or consumed by the view that has been prepared to accept ONE instance variable <code>@page_controls</code> values bean.</p>
                <p>For apps that have some sort of menu-bar or top of page information
			          section.  We up the instance variable count by one, by allowing a <code>@page_info</code> values bean, which would contain all the values needed to populate the top of page information section of
			          that page thru the page partials prepared for it.  In cases where the return code to the controller method is negative, we maintain the <code>:success, :message</code> keys in the
			          values bean (i.e. ResultsBean) to carry this failure state.  This allows the controller to redirect to the logical next page based on error, or continue to regular destination 
			          on success; message is used for the Flash message when needed.</p>

			          <pre class="pre-scrollable prettyprint lang-rb">
class ProfilesController < ApplicationController

  # HTML only response
  def content_profile_demo
    @page_controls = content_profile_service.handle_demo_page(params)
    flash.notice.now = @page_controls.message if @page_controls.message.present?
    # unless were CRUDing the view will handle any errors, so no redirects needed here.
  end

  # JSON only response
  def content_profile_api
    @page_controls = content_profile_service.handle_content_api(params)
    render json: @page_controls.to_hash, status: @page_controls.success ? :accepted : :not_found, layout: false, content_type: :json and return
  end

  ...
end
          			</pre>

          			<p class="lead">For models we have a similar approach.  Only add what is relevant and required to effectively use or protect the data record.</p>
          			<pre class="prettyprint lang-rb pre-scrollable">
ProfileType < ActiveRecord::Base
  has_one :content_profile
  validates_presence_of :name, :description

  def self.pt_options_selects
    self.all.map do |pts|
      [pts.name, pts.id, {data: {description: pts.description}}]
    end
  end
end          				
          			</pre>
                    <p>In the case of models this mean only short methods to help with form option lists, and the model's own validation methods. Nothing more!</p>
          		</div>
       		</div>
       		<p>If we don't add business logic to the controllers or the models, where does it go?  Answer, in the Services objects which inherit directly from Domain objects.</p>
       		<p>A side benefit of not adding business logic in controllers and models is: <strong><em>If there is no code there, then you don't have to test them!</em></strong>.
          Additionally, if you must test a controller; mocking a single method call, and mocking the @page_controls makes controller testing simpler.</p>
     	</div>

        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingdomains">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#domains" aria-expanded="false" aria-controls="headingdomains">
                        Design Guidance: Domain and Services Model
                    </a>
                </h4>
            </div>
            <div id="domains" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingdomains">
                <div class="panel-body">
                    <p class="lead">Using object-oriented design methodologies, we develop a domain model for our application, and encapsulate those objectives in a Domain class.</p>
                    <p>To delivery the value contained in a <strong>Domain class</strong> we wrap them in a <strong>Services class</strong>.  Which acts as an adapter to bring that value to the user.  This typically means
                       developing an html page with views and controllers to present the informational results to the user.  However, since we only delivery a package of data values to the controller interface
                       method, it is possible to serve those data values as JSON to a browser based application, like BackBone, or to a wide range of endpoints; even a PDF generator.</p>
                    <p>The core of our Application is defined in an object-oriented fashion and protected or isolated from the delivery frameworks(s) used to delivery its value to the user.
                       When changes and enhancements to the business logic is needed, we can make those changes without great concern or contraints being imposed by the delivery mechanism.  This also faciliates
                       making changes or upgrades to the delivery frameworks.</p>
                    <p>Services inherit directly from Domains to further shield our application from the external frameworks; this is easy to see when considering the controller.  Models on the other hand
                       need to be wrapped by Domain methods to prevent their inline introduction or leakage into the Domains.  I've chosen to go one step further and dedicate a <code>&lt;domain&gt;DataServices</code>
                       class that wraps all the ActiveRecord IO calls, expecting it to be called by either Domain methods or Services methods.  I have considered using a Repository strategy to add more isolation and to facilitate testing.
                       For now the specialty domain level IO class provides enough isolation.  Ideally we should be able to write RSpec tests for the service/domain classes without invoking the Rails environment, or at least with fewer dependencies.</p>
                    <p>If service objects are focused on transforming domain results to external interfaces, and domains themselves are focused on the core business logic of a single process.  Then yes, there will
                       be many or several domains classes, one to support each business process.  However, a domain class need not do all the heavy lifting, its single-responsibility is producing a contextually valid result
                       from the triggering event or input.</p>
                    <p>Domains produce those results best by invoking secondary task oriented objects to complete elements of the overall process, positioning domains to be the orchestrator or main-line
                       for the business process they are assigned.  Task oriented objects must adhere to the single-responsibility guideline to maintain their value to the overall system's design.  Again enhancing
                       our ability to test off-line from Rails, and making the code more portable with greater reuse opportunities.  A task object would completely handle a task step or elements of the logical process flow
                       domain objects are responsible for.  <em>use the force!</em></p>
                </div>
            </div>
            <p class="lead">Admittedly, this demonstration has not reached that level of <em>Nirvana</em> yet, but it is the design objective, and I'm not done! Construction details follow.</p>
        </div>

        <div class="panel panel-info">
        <div class="panel-heading" role="tab" id="headingintents">
            <h4 class="panel-title">
                <a class="collapsed" role="button" data-toggle="collapse" href="#intents" aria-expanded="false" aria-controls="headingintents">
                    Design Guidance: This Application's Value Domain and Intent
                </a>
            </h4>
            </div>
            <div id="intents" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingintents">
                <div class="panel-body">
                    <p class="lead">The primary intent is to be a feasible example demonstrating Authentication, Authorization, and Content Access Control.  The Domain model composed to
                    facilitate this demonstration is as follows.</p>
                    <dl class="dl-horizontal">
                        <dt>Primary Use Case</dt>
                        <dd>
                            <p>Allow users to download a collection of file based content, and optionally upload additional content.  The content is protected
                            by access and content controls, ensuring only users authorized for that type of content have access.</p>
                            <p>If you are a audio mix engineer and need to exchange music files with clients or mastering partners,  this app would facilitate that exchange unsuring
                            only the right people at a client or partner could access the protected project files.  No doubt you have signed several confidentiality contracts that
                            require you not to expose the musical content <em>in any way</em> to parties not listed on the contract: This app enables you to meet those strict requirements.</p>
                        </dd>
                        <dt>Administer Profiles</dt>
                            <dd>
                                <p>Represent what content access we desire for each user in a standardized way, via the ContentProfile.
                                   Provide ancillary and administrative processes to register and maintain users for the application.</p>
                            </dd>
                        <dt>Execute AccessProfile</dt>
                            <dd>
                                <p>Apply the pre-defined AccessProfile control to all navigation and clickable actions of the application.</p>
                            </dd>
                        <dt>Execute ContentProfile</dt>
                            <dd>
                                <p>Apply the pre-defined ContentProfile controls against down-loadable assets, and upload requests from a user.</p>
                            </dd>
                    </dl>
                </div>
            </div>
            <p>Now for the architectural component details. i.e how these design principals were applied to meet the business model objective?</p>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingUp">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#UserProfileService" aria-expanded="false" aria-controls="headingUp">
                        UserProfile Service
                    </a>
                </h4>
            </div>
            <div id="UserProfileService" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingUp">
                <div class="panel-body">
                    <h5>UserProfile Service</h5>
                    <dl class="dl-horizontal">
                        <dt>Instantiate</dt>
                            <dd>
                                <p>By Warden at user login, via Class methods.</p>
                                <p>Requires a User object to instantiate itself, and that object must have a unique Id.</p>
                                <p>During initialization the user's roles are rendered from those assigned via group roles.</p>
                            </dd>
                        <dt>Inheritance</dt>
                            <dd><p>Secure::UserProfile, inherits from <code>::Factory::ServicesBase</code> which yields a memory-based Object Storage Interface Module <code>Factory::ObjectStorageService</code>, capable of keeping references to memory
                                object across the users request/response cycle; much like the session does and for the same reasons. i.e some objects are expensive to create and may benefit from session-like
                                retention until there usage is complete.</p>
                        <dt>Provides</dt>
                            <dd>
                                <p>Secure::UserProfile provides the User Context for all application processes.</p>
                                <p>Isolates external authentication sources and methods from our internal details. External systems need only
                                    authenticate a user and pass along a persistent and unique id.  User permission or roles can be included in
                                    this external bundle, or we can do an internal mapping of that external user.  This system has its own internal
                                    User table which contains the persistent Id, individual and group roles.</p>
                                <p>Static class methods are provided to allow Warden to:<br/>
                                    <dl>
                                        <dt><code>:find_and_authenticate_user(uname, upass)</code></dt>
                                            <dd>Locate a user with these credentials in whatever user store is available</dd>
                                        <dt><code>:fetch_remembered_user(token)</code></dt>
                                            <dd>Locate a user using their remember token</dd>
                                        <dt><code>:fetch_cached_user(token)</code></dt>
                                            <dd>Locate an existing user exclusively from the inMemory storage facility.</dd>
                                        <dt><code>:logout(token)</code></dt>
                                            <dd>Log out the user and remove them from the inMemory storage, clear their remember_token and session.</dd>
                                        <dt><code>:last_login_time_expired?(user_object)</code></dt>
                                            <dd>Update the last time user access the system and if expired, revalidate their credentials.</dd>
                                        <dt><code>:authenticate?(unencrypted_password)</code></dt>
                                            <dd>Bcryts Authenticate returns self, we need to override that return value to return self instead</dd>
                                        <dt><code>:enable_authentication_controls</code></dt>
                                            <dd>After successful login, this method saves the user object into our inMemory storage for later session level retrieval. Also update :last_access.</dd>
                                        <dt><code>:disable_authentication_controls</code></dt>
                                            <dd>Remove the user object reference from inMemory storage, updates :last_access.</dd>
                                    </dl>
                                </p>
                                <p>Static class methods are provided to facilitate content profile, and testing service to:<br/>
                                    <dl>
                                        <dt><code>:page_users(context)</code></dt>
                                            <dd>Retrieve the list of all users without logging them in.  For use with offline operations.</dd>
                                        <dt><code>:page_user(uname, context)</code></dt>
                                            <dd>Retrieves a single user object without logging it in, for offline use.</dd>
                                    </dl>
                                </p>
                                <p>Instance methods are provided to allow AccessRegistry access control application wide:<br/>
                                <ul class="">
                                    <li><code>:has_access?(resource_uri,options)</code></li>
                                    <li><code>:has_create?(resource_uri,options)</code></li>
                                    <li><code>:has_read?(resource_uri,options)</code></li>
                                    <li><code>:has_update?(resource_uri,options)</code></li>
                                    <li><code>:has_delete?(resource_uri,options)</code></li>
                                </ul>
                                </p>
                                <p>Instance methods support ApplicationHelper methods for use in view and controller actions:<br/>
                                <ul class="">
                                    <li><code>:current_user_has_access?(uri, options)</code></li>
                                    <li><code>:current_user_has_read?(uri, options)</code></li>
                                    <li><code>:current_user_has_create?(uri, options)</code></li>
                                    <li><code>:current_user_has_update?(uri, options)</code></li>
                                    <li><code>:current_user_has_delete?(uri, options)</code></li>
                                </ul>
                                </p>
                                <p>Designed to be the User's proxy to the whole system.  Working in concert with Authentication and
                                    Authorization components it enables delivery of secure content with the availability of different authentication schemes.</p>
                            </dd>
                    </dl>
                </div>
            </div>
            <p>The User's Context</p>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingTwo">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#ServiceFactory" aria-expanded="false" aria-controls="collapseTwo">
                        ServiceFactory
                    </a>
                </h4>
            </div>
            <div id="ServiceFactory" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                <div class="panel-body">
                    <h5>ServiceFactory</h5>
                    <dl class="dl-horizontal">
                        <dt>Instantiate</dt>
                        <dd>
                            <p>ServiceFactory is instantiated by the top level Application Controller using a <code>:before_action</code> callback to a private method
                                called <code>:establish_domain_services</code>.  There is also a twin to this callback referred to as <code>:manage_domain_services</code>,
                                called by the <code>:after_action</code> callback.</p>
                            <p><code>:establish_domain_services</code> and <code>:manage_domain_services</code> work to recover assets from the request session, and to save keys
                                to those assets into the session just before the controller exits back to the browser.  The ServiceFactory is lightwieght and would derive no real benefit from being
                                serialized into a session.  So it is simply created anew with each request/response cycle.</p>
                            <p>The ServiceFactory itself is instantiated as <code>@service_factory</code> in the top level ApplicationController, behind a memotizing method <code>service_factory</code>.
                                To instantiate a ContentProfileService use: <code>service_factory.content_profile_service.some_method_name(params)</code>.</p>
                            <p>The intended use of the <code>service_factory</code> is to provide lazy instantiation and memotization of all service/domain objects in the application. And to additionally
                                provide them critical facilites, like <code>:current_user</code>, and act as an isolation gateway to the application controller.</p>
                            <p>Inside of services, like ContentProfileService or ContentProfileBuilder, reference the service_factory as <code>:factory</code>, as in: <code>factory.content_profile_service.some_method</code> .</p>
                        </dd>
                        <dt>Inheritance</dt>
                        <dd><p>ServiceFactory, inherits from <code>::Factory::ServicesBase</code> which yields a memory-based Object Storage Interface Module <code>Factory::ObjectStorageService</code>, capable of keeping references to memory
                            object across the users request/response cycle; much like the session does and for the same reasons. i.e some objects are expensive to create and may benefit from session-like
                            retention until there usage is complete.</p>
                        <dt>Provides</dt>
                        <dd>
                            <p>ServiceFactory provides Services with the <code>:current_user</code>, <code>:controller</code> reference, and a <code>:method_missing</code> feature capable of
                                directing :not_found method calls to the controller to be serviced if possible.</p>
                            <p>Services should truly limit their demands of the controller object to zero if possible, and have the service_factory devise a solution to their requirements.  The most often
                                experienced demand for the controller is when a service needs to resolve a named route or render a template partial to embed in a json response.</p>
                            <p>Let's not recreate the application controller, for those types of requirements use the controller, just wrap those patterns in a method defined in the service_factory or a
                                controller helper/presenter.  This way it can be easily mocked out later for testing.  In fact, I do use a <code>:page_actions</code> view helper located in the
                                ApplicationHelper module, to handle rendering and route resolutions from a hashed set of control data from a service.  Basically, outsourcing to the ActionView those things it does best; and totally removing the need for a controller object in the majority of services and domains.</p>
                            <p>Engineering objectives shall include, avoidance of the controller in all services, domains, and specialty business services classes.  It is possible and practical, your RSpec tests will demonstrate it later.</p>
                            <dl>
                                <dt>ObjectStorageService API</dt>
                                <dd>
                                            <div class="well-sm">
                                            <p># Saves object to inMemory ObjectStore<br/>
                                               # Returns storage key, needed to retrieve<br/>
                                                <code>:save_new_object(obj)</code></p>
                                            </div>
                                            <div class="well-sm">
                                             <p># Updates existing container with new object reference<br/>
                                                # returns object<br/>
                                                <code>:set_existing_object(key, obj)</code></p>
                                            </div>
                                            <div class="well-sm">
                                                <p># Retrieves object from InMemory Storage<br/>
                                                # returns object<br/>
                                                <code>:get_existing_object(key)</code></p>
                                            </div>
                                            <div class="well-sm">
                                                <p># Releases object from InMemory Storage<br/>
                                                # returns object, if present<br/>
                                                <code>:remove_existing_object(key)</code></p>
                                            </div>
                                </dd>
                                <dt>Session API</dt>
                                <dd>
                                    <div class="well-sm">
                                        <p><code>:get_session_params(key)</code><br/>
                                        <code>:set_session_params(key, value)</code></p>
                                    </div>
                                </dd>
                                <dt>Named Route Helpers</dt>
                                <dd>
                                    <div class="well-sm">
                                      <p>
                                        Converts named routes to string<br/>
                                          Basic: <code>[:named_route_path, {options}, '?query_string']</code><br>
                                          Advanced: <code>{engine: :demo, path: :demo_profiles_path, options: {id:111304},query:'?query_string'}</code><br/>
                                        <br/>
                                        Example: <code>factory.page_action_paths(paths)</code></p>
                                    </div>
                                </dd>
                            </dl>
                        </dd>
                    </dl>
                    <p>All Services, like ContentProfileBuilder, ProfileDataServicess or ContentProfileService, should be instantiated via the service_factory facilities.  And primary utility objects can also be supported via the service factory.</p>
                </div>
            </div>
            <p>Container, and Provider of Business Object Services!</p>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingOne">
                <h4 class="panel-title">
                    <a role="button" data-toggle="collapse" href="#ProfileDataServices" aria-expanded="true" aria-controls="collapseOne">
                        ProfileDataServices
                    </a>
                </h4>
            </div>
            <div id="ProfileDataServices" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="panel-body">
                    <h5>ProfileDataServices</h5>
                    <dl class="dl-horizontal">
                        <dt>Instantiate</dt>
                        <dd>
                            <p>ServiceFactory provides instantiation services to any requester in the request/response cycle.</p>
                            <p>The intended use of this services object methods is to handle all IO related operations for Profile Data. It should not interact directly with ApplicationController entry points.</p>
                        </dd>
                        <dt>Inheritance</dt>
                        <dd><p>ProfileDataServices, inherits common instantiation service from the <code>ProfilesDomain</code> class.  The ProfilesDomain class inherits from the <code>::Factory::DomainsBase</code>,
                            which yields common initialization services, like the current_user() and access back to the service_factory for interaction with the controller if needed.  In particular, the <code>service_factory</code> includes
                            object storage services and session storage services through its inheritance chain.</p></dd>
                        <dt>Provides</dt>
                        <dd><p>ProfileDataServices provides contextual data access for content profile data objects and standard data packaging for internal processes.</p>
                        </dd>
                    </dl>
                </div>
            </div>
            <p>Instantiated by: <code>service_factory()</code></p>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingTwo">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#ContentProfileService" aria-expanded="false" aria-controls="collapseTwo">
                        ContentProfileService
                    </a>
                </h4>
            </div>
            <div id="ContentProfileService" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                <div class="panel-body">
                    <h5>ContentProfileService</h5>
                    <dl class="dl-horizontal">
                        <dt>Instantiate</dt>
                        <dd>
                            <p>ServiceFactory provides instantiation services to any requester in the request/response cycle.</p>
                            <p>The intended use of services object methods is to handle all operations for a controller entry point(url), and return a single information bundle <code>@page_controls</code>, based
                                on the <code>SknUtils::PageControls</code> group of result bean containers.</p>
                        </dd>
                        <dt>Inheritance</dt>
                        <dd><p>ContentProfileService, inherits io routines and common business logic from the <code>ProfilesDomain</code> class.  The ProfilesDomain class inherits from the <code>::Factory::DomainsBase</code>,
                            which yields common initialization services of like the current_user() and access back to the service_factory for interaction with the controller if needed.  In particular, the <code>service_factory</code> includes
                            object storage services and session storage services through its inheritance chain.</p>
                        <dt>Provides</dt>
                        <dd><p>ContentProfileService provides customized business logic and standard information packaging for the application entry points assigned to  it.  Where ever used you can be assured of a valid response encoded
                            in a <code>@page_controls</code> bean container, and all exceptions are trapped by its top level method.   PageControl bean containers are required to include
                            <code>success: true|false, and message: error_message|success_message|empty</code> values at a minimum.</p>
                            <p>JSON Api methods are hosted by this service.</p>
                        </dd>
                    </dl>
                </div>
            </div>
            <p>Instantiated by: <code>service_factory()</code></p>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingThree">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#ProfileBuilder" aria-expanded="false" aria-controls="collapseThree">
                        [Business Process] ProfileBuilder
                    </a>
                </h4>
            </div>
            <div id="ProfileBuilder" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingThree">
                <div class="panel-body">
                    <h5>ProfileBuilder</h5>
                    <dl class="dl-horizontal">
                        <dt>Instantiate</dt>
                        <dd>
                            <p>ServiceFactory provides instantiation services to any requester in the request/response cycle.</p>
                            <p>This service provides the data-backed ContentProfile and XML-backed AccessProfile, normalized as a ContentProfile object.</p>
                            <p>The intended use of content profile builder methods is to offer a business logic control of accessible content available to each authenticated user.</p>
                        </dd>
                        <dt>Inheritance</dt>
                        <dd><p>Builder::ProfileBuilder, like the <code>ProfilesDomain</code>, inherits directly from the <code>::Factory::DomainsBase</code> class, and yield business logic methods to higher level service objects.
                            Services take the results of one or more of these <em>business logic complete</em> methods and package them for external exchange in the controller response.</p>
                        <dt>Provides</dt>
                        <dd><p>ProfileBuilder provides logical access to the service factory and all other peer services the factory manages.  It directly provides methods to produce Content Profiles.</p>
                            <dl>
                                <dt><code>:combined_profiles</code></dt>
                                <dd>Both source styles of the ContentProfile returned in one array, <code>[hsh_access,hsh_content]</code>.</dd>
                                <dt><code>:content_profile</code></dt>
                                    <dd>The database backed entries, rendered as a ContentProfile.</dd>
                                <dt><code>:access_profile</code></dt>
                                    <dd>The XML AccessRegistry backed entries, rendered as a ContentProfile.</dd>
                            </dl>
                            <p>Each method requires a UserProfile instance, and optional true/false flag indicating if the result should be a hash or Utility::ContentProfileBean.</p>
                        </dd>
                    </dl>
                </div>
                <p>This service provides the ContentProfile business object</p>
            </div>
            <p>Instantiated by: <code>service_factory()</code></p>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingThree">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#DomainServices" aria-expanded="false" aria-controls="collapseThree">
                        [Business Process] DomainServices
                    </a>
                </h4>
            </div>
            <div id="DomainServices" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingThree">
                <div class="panel-body">
                    <h5>DomainServices</h5>
                    <dl class="dl-horizontal">
                        <dt>Instantiate</dt>
                        <dd>
                            <p>DomainServices are not instantiated directly, they are inherited by higher level and more specialized service classes.</p>
                            <p>The intended use of domain services classes methods is to offer a business logic control of a single business domain.  It is the starting point for all business domains objects and process services.</p>
                        </dd>
                        <dt>Inheritance</dt>
                        <dd><p>DomainServices, like the <code>ProfilesDomain</code>, inherit directly from the <code>::Factory::DomainsBase</code> class, and yield business logic methods to higher level service objects.
                            Services take the results of one or more of these <em>business logic complete</em> methods and package them for external exchange in the controller response.</p>
                        <dt>Provides</dt>
                        <dd><p>DomainServices provide logical access to the service factory and all other peer services the factory manages.  Typically you would find two to three levels of methods in a DomainServices class.</p>
                            <dl>
                                <dt>Level One</dt>
                                <dd>Top level business interface.  Methods at this level take responsibility for doing the whole task; process a order or payment, would be an example of this.</dd>
                                <dt>Level Two</dt>
                                <dd>The notion of the whole task, is likely to have component steps involved.  At this level methods are expected to perform one elements of the whole task.
                                    For this single-responsibility reason, we recommend creating dedicated objects to handle these component parts.</dd>
                                <dt>level Three</dt>
                                <dd>Is rarely needed, but if so would handle very narrow objectives; like I/O or RESTFul routines.</dd>
                            </dl>
                            <p>This is the best place to exploit object-oriented design principles.</p>
                        </dd>
                    </dl>
                </div>
                <p>The Business Process Interface is here.</p>
            </div>
            <p>Inherited by: <code>ContentProfileService, ProfileDataServices, ...</code></p>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingTwo">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#SknUtils" aria-expanded="false" aria-controls="collapseTwo">
                        ResultBean Value Containers
                    </a>
                </h4>
            </div>
            <div id="SknUtils" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                <div class="panel-body">
                    <p>The <strong>skn_utils.gem</strong> contains dynamic base classes inherited to create local value containers or beans; plain old ruby objects (PORO).</p>
                    <p>Initialized with a Hash of key value pairs: <code>res = SknUtils::PageControls.new({one: 1, two: [{one: 'one', two: 'two'}]})</code>  The keys become method names that return the associated values.  This
                    transformation of the hash continues, during its initialization, to follow nested hashes and arrays of hashes.</p>
                    <p>Nesting can be controller by initialization params, or choose from ready made base classes, preset to follow or not follow nesting.
                        SknUtils::ResultBean class only follows directly valued hashed, while the SknUtils::PageControls class follows directly valued hashes
                        and arrays of hashes. SknUtils::Genericbean only follow the initial hash, leaving all nested values untouched.   </p>
                    <p>Overall the result of using this gem is an easily used container for transporting or packaging values for use in views, json responses, etc.
                    Accessing the values in a SknUtil bean can be done using <code>dot</code> notation, or <code>hash</code> notation:
                    example: <code>res.one #=> 1</code>, <code>res.two.first.two #=> 'two'</code></p>
                    <p>If you need to unwrap the bean to convert it to json or just to have the hash back;<br/> <code>res.to_hash #=> {one: 1, two: [{one: 'one', two: 'two'}]}</code>, gets the job done.</p>
                    <p>There are many more logical features built into the package, read more at <a href="https://github.com/skoona/skn_utils">SknUtils</a>. The is one feature that you should know and use:
                    the present <code>&lt;keyName&gt;?</code> feature.  Example: <code>res.two? #=> true,  res.twenty? #=> false</code></p>

                    <dl class="dl-horizontal">
                        <dt>SknUtils:PageControls</dt>
                          <dd>Used directly to transport values to controller method.</dd>
                        <dt>Utility::ContentProfileBean < SknUtils:PageControls</dt>
                            <dd>Locally defined container used to transport data-driven content profiles.</dd>
                    </dl>
                </div>
            </div>
            <p>skn_utils.gem</p>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingThree">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#JSONApis" aria-expanded="false" aria-controls="collapseThree">
                        JSON APIs
                    </a>
                </h4>
            </div>
            <div id="JSONApis" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingThree">
                <div class="panel-body">
                      <pre class="pre-scrollable prettyprint">
                                        Final Access Package listing: One for each user is available in the API
                                        GET: /profiles/content_profile_demo.json
                                        GET: /profiles/access_profile_demo.json

                        {
                          "user_options":["Manager","0034","0037","0040"],
                          "username":"developer",
                          "display_name":"Employee Primary User: Developer",
                          "package":{
                            "success":true,
                            "message":"AccessProfile Entries for developer:Employee Primary User: Developer Options=Manager,0034,0037,0040",
                            "user_options":["Manager","0034","0037","0040"],
                            "accessible_content_url":"/profiles/accessible_content.json?id=access",
                            "page_user":"developer",
                            "access_profile":{
                                "username":"developer","entries":[
                                   {"user_options":["Manager","0034","0037","0040"],
                                    "topic_value":"PDF",
                                    "content_value":{"doctype":"954"},
                                    "content_type":"Commission",
                                    "content_type_description":"Branch Commission Statements",
                                    "topic_type":"Branch",
                                    "topic_type_description":"Branch Commission Statements",
                                    "description":"Branch Commission Statements",
                                    "username":"developer",
                                    "uri":"Commission/Branch/PDF"
                                   },
                                   {"user_options":["Manager","0034","0037","0040"],"topic_value":"CSV","content_value":{"doctype":"955"},"content_type":"Commission","content_type_description":"Branch Commission CSV Datafiles","topic_type":"Branch","topic_type_description":"Branch Commission CSV Datafiles","description":"Branch Commission CSV Datafiles","username":"developer","uri":"Commission/Branch/CSV"},
                                   {"user_options":["Manager","0034","0037","0040"],"topic_value":"PDF","content_value":{"doctype":"956"},"content_type":"Experience","content_type_description":"Branch Experience Statements","topic_type":"Branch","topic_type_description":"Branch Experience Statements","description":"Branch Experience Statements","username":"developer","uri":"Experience/Branch/PDF"}
                                                             ],
                                "pak":null,
                                "profile_type":"",
                                "profile_type_description":"",
                                "provider":"UserProfile",
                                "display_name":"Employee Primary User: Developer",
                                "email":"skoona@gmail.com"
                            }
                          }
                        }


                                        Final Access Package on Users List
                                        GET: /profiles/accessible_content.json?id=access

                        REQUEST:  {
                            "user_options":["Manager","0034","0037","0040"],
                            "topic_value":"PDF",
                            "content_value":{"doctype":"954"},
                            "content_type":"Commission",
                            "content_type_description":"Branch Commission Statements",
                            "topic_type":"Branch",
                            "topic_type_description":"Branch Commission Statements",
                            "description":"Branch Commission Statements",
                            "uri":"Commission/Branch/PDF",
                            "username":"developer"
                            }

                        RESPONSE: {
                            "success":true,
                            "content":"access"
                            "message":"",
                            "username":"developer",
                            "display_name":"Employee Primary User: Developer",
                            "package":[
                                {"source":"datafiles","filename":"someFile.dat","created":"2016-01-05T16:18:57.881-05:00","size":"0"},
                                {"source":"images","filename":"somePic.png","created":"2016-01-05T16:18:57.881-05:00","size":"0"},
                                {"source":"pdfs","filename":"someFile.pdf","created":"2016-01-05T16:18:57.881-05:00","size":"0"}
                                      ]
                            }


                                        Final ContentProfile Package on Users List
                                        GET: /profiles/accessible_content.json?id=content

                        REQUEST: {
                            "user_options":["Manager","0034","0037","0040"],
                            "topic_value":"Branch",
                            "content_value":["68601","68602","68603"],
                            "content_type":"Commission",
                            "content_type_description":"Monthly Commission Reports and Files",
                            "topic_type":"Branch",
                            "topic_type_description":"Branch Actions",
                            "description":"Determine which branch documents can be seen",
                            "username":"developer"
                            }

                        RESPONSE: {
                            "content":"content"
                            "success":true,
                            "message":"",
                            "username":"developer",
                            "display_name":"Employee Primary User: Developer",
                            "package":[
                                {"source":"datafiles","filename":"someFile.dat","created":"2016-01-05T16:24:12.066-05:00","size":"0"},
                                {"source":"images","filename":"somePic.png","created":"2016-01-05T16:24:12.066-05:00","size":"0"},
                                {"source":"pdfs","filename":"someFile.pdf","created":"2016-01-05T16:24:12.066-05:00","size":"0"}
                                      ]
                            }
                      </pre>
                </div>
            </div>
            <p>JSON Apis</p>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingTwo">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#ProcessController" aria-expanded="false" aria-controls="collapseTwo">
                        [Process] Controller
                    </a>
                </h4>
            </div>
            <div id="ProcessController" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                <div class="panel-body">
                    [Process] Controller
                </div>
            </div>
            <p>More Stuff like tables</p>
        </div>
        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingTwo">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#Configuration" aria-expanded="false" aria-controls="collapseTwo">
                        Configuration
                    </a>
                </h4>
            </div>
            <div id="Configuration" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                <div class="panel-body">
                    Config.gem
                </div>
            </div>
            <p>More Stuff like tables</p>
        </div>
        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingTwo">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#RailsModel" aria-expanded="false" aria-controls="collapseTwo">
                        Rails Model
                    </a>
                </h4>
            </div>
            <div id="RailsModel" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                <div class="panel-body">
                    Rails Model: has_and_belongs_to_many was chosen as the method of interaction, to allow maximum reuse of existing patterns contained in Content/Topic and ContentTypeEntries models.
                </div>
            </div>
            <p>More Stuff like tables</p>
        </div>
        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingTwo">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#RailsViews" aria-expanded="false" aria-controls="collapseTwo">
                        Rails View Helpers
                    </a>
                </h4>
            </div>
            <div id="RailsViews" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                <div class="panel-body">
                    <p>Rails Views: BootStrap, JQuery DataTables, and SimpleForms are our choice for classic erb page composition and rendering.</p>
                    <h4>View Helpers/Builders</h4>
                    <dl class="dl-horizontal">
                        <dt>PageActionsBuilder</dt>
                        <dd>
                            <p>A Class designed to build page action dropdown menus from an array of hashes contain with keys describing each menu item.</p>
                            <p>It is initiated by an <code>ApplicationHelper#do_page_actions</code> and assumes it input array is in either <code>@page_controls.page_actions or .package.page_actions</code>.</p>
                            <p>In your services routine response you can add a <code>:page_actions</code> array of params, and this helper will create the classic pulldown or action button for you.</p>
                        </dd>
                        <dt>#page_action_paths</dt>
                        <dd>
                            <p>Located in <code>ApplicationHelper#page_action_paths</code>, this methods resolves named routes into strings.  You
                            would use this method to resolve named paths for inclusion in json responses, or anywhere else you might need it.</p>
                        </dd>
                    </dl>
                </div>
            </div>
            <p>Describes helpers we created for views.</p>
        </div>
        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingTwo">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#RailsApplicationControllers" aria-expanded="false" aria-controls="collapseTwo">
                        Rails Application Controllers
                    </a>
                </h4>
            </div>
            <div id="RailsApplicationControllers" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                <div class="panel-body">
                    Rails Application Controllers are a neccessary evil, which we tolerate.
                </div>
            </div>
            <p>More Stuff like tables</p>
        </div>
        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingTwo">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#RSpecTesting" aria-expanded="false" aria-controls="collapseTwo">
                        RSpec Testing
                    </a>
                </h4>
            </div>
            <div id="RSpecTesting" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                <div class="panel-body">
                    RSpec Testing: This Rocks
                </div>
            </div>
            <p>More Stuff like tables</p>
        </div>
        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingTwo">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#AuthorizationDataModel" aria-expanded="false" aria-controls="collapseTwo">
                        Authorization Data Models
                    </a>
                </h4>
            </div>
            <div id="AuthorizationDataModel" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                <div class="panel-body">
                    <h2>Authorization Data Models</h2>
                    <%= image_tag("SknService-ContentModelOnly.png", alt: "ContentProfile Data Tables", class: "huge-image") %>
                </div>
            </div>
            <p>Authorization Data Models</p>
        </div>
        <div class="panel panel-info">
            <div class="panel-heading" role="tab" id="headingTwo">
                <h4 class="panel-title">
                    <a class="collapsed" role="button" data-toggle="collapse" href="#ApplicationDataModel" aria-expanded="false" aria-controls="collapseTwo">
                        Application Data Model
                    </a>
                </h4>
            </div>
            <div id="ApplicationDataModel" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                <div class="panel-body">
                    <h2>Application Data Model</h2>
                    <%= image_tag("SknService-DataModel.png", alt: "Application Data Model", class: "huge-image") %>
                </div>
            </div>
            <p>Authentication and Authorization Data Models</p>
        </div>
    </section>

</article>
